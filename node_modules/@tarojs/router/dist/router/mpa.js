var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable dot-notation */
import { createPageConfig, eventCenter, hooks, incrementId, stringify, } from '@tarojs/runtime';
import { setTitle } from '../utils/navigate';
import { RouterConfig } from '.';
import MultiPageHandler from './multi-page';
const createStampId = incrementId();
const launchStampId = createStampId();
// TODO 支持多路由 (APP 生命周期仅触发一次)
/** Note: 关于多页面应用
 * - 需要配置路由映射（根目录跳转、404 页面……）
 * - app.onPageNotFound 事件不支持
 * - 应用生命周期可能多次触发
 * - TabBar 会多次加载
 * - 不支持路由动画
 */
export function createMultiRouter(app, config, framework) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof app.onUnhandledRejection === 'function') {
            window.addEventListener('unhandledrejection', app.onUnhandledRejection);
        }
        RouterConfig.config = config;
        const handler = new MultiPageHandler(config);
        const launchParam = {
            path: config.pageName,
            query: handler.getQuery(launchStampId),
            scene: 0,
            shareTicket: '',
            referrerInfo: {}
        };
        eventCenter.trigger('__taroRouterLaunch', launchParam);
        (_a = app.onLaunch) === null || _a === void 0 ? void 0 : _a.call(app, launchParam);
        app.onError && window.addEventListener('error', e => { var _a; return (_a = app.onError) === null || _a === void 0 ? void 0 : _a.call(app, e.message); });
        const pathName = config.pageName;
        const pageConfig = handler.pageConfig;
        eventCenter.trigger('__taroRouterChange', {
            toLocation: {
                path: pathName
            }
        });
        let element;
        try {
            element = yield ((_b = pageConfig.load) === null || _b === void 0 ? void 0 : _b.call(pageConfig));
            if (element instanceof Array) {
                element = element[0];
            }
        }
        catch (error) {
            throw new Error(error);
        }
        if (!element)
            return;
        let enablePullDownRefresh = ((_c = config === null || config === void 0 ? void 0 : config.window) === null || _c === void 0 ? void 0 : _c.enablePullDownRefresh) || false;
        if (pageConfig) {
            setTitle((_d = pageConfig.navigationBarTitleText) !== null && _d !== void 0 ? _d : document.title);
            if (typeof pageConfig.enablePullDownRefresh === 'boolean') {
                enablePullDownRefresh = pageConfig.enablePullDownRefresh;
            }
        }
        const el = (_e = element.default) !== null && _e !== void 0 ? _e : element;
        const loadConfig = Object.assign({}, pageConfig);
        delete loadConfig['path'];
        delete loadConfig['load'];
        const page = createPageConfig(enablePullDownRefresh ? hooks.call('createPullDownComponent', el, pathName, framework, handler.PullDownRefresh) : el, pathName + stringify(launchParam), {}, loadConfig);
        handler.load(page, pageConfig);
        (_f = app.onShow) === null || _f === void 0 ? void 0 : _f.call(app, launchParam);
    });
}
