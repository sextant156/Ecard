import ListSet from "./list-set.js";
import { defaultItemKey } from "./utils.js";
import { VirtualListProps } from "./index.js";
interface IProps extends Partial<VirtualListProps> {
    children?: VirtualListProps['item'];
    direction?: 'ltr' | 'rtl' | 'horizontal' | 'vertical';
    itemKey?: typeof defaultItemKey;
    itemTagName?: string;
    innerTagName?: string;
    outerTagName?: string;
    itemElementType?: React.ComponentType | string;
    outerElementType?: React.ComponentType | string;
    innerRef?: React.Ref<HTMLElement> | string;
    outerRef?: React.Ref<HTMLElement> | string;
    onItemsRendered?: TFunc;
    shouldResetStyleCacheOnItemSizeChange?: boolean;
}
declare class Preset {
    protected props: IProps;
    protected refresh?: TFunc;
    itemList: ListSet;
    constructor(props: IProps, refresh?: TFunc);
    wrapperField: {
        scrollLeft: number;
        scrollTop: number;
        scrollHeight: number;
        scrollWidth: number;
        clientHeight: number;
        clientWidth: number;
        diffOffset: number;
    };
    diffList: number[];
    init(props: IProps): void;
    update(props: IProps): void;
    get id(): string;
    get isHorizontal(): boolean;
    get isRtl(): boolean;
    get isRelative(): boolean;
    get placeholderCount(): number;
    get outerTagName(): string | import("react").ComponentType<{}>;
    get innerTagName(): string | import("react").ComponentType<{}>;
    get itemTagName(): string | import("react").ComponentType<{}>;
    get field(): Record<string, number>;
    set field(o: Record<string, number>);
    isShaking(diff?: number): boolean;
    getItemStyleCache: import("memoize-one").MemoizedFn<(_itemSize?: IProps['itemSize'] | false, _layout?: IProps['layout'] | false, _direction?: IProps['direction'] | false) => {}>;
    getItemStyle(index: number): any;
}
export { IProps, Preset as default };
