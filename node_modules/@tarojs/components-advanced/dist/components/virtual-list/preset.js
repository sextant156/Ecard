import memoizeOne from 'memoize-one';
import '../../utils/index.js';
import ListSet from './list-set.js';
import { isHorizontalFunc, isRtlFunc } from './utils.js';
import { isCosDistributing } from '../../utils/math.js';
import { convertNumber2PX } from '../../utils/convert.js';

let INSTANCE_ID = 0;
class Preset {
    constructor(props, refresh) {
        this.props = props;
        this.refresh = refresh;
        this.wrapperField = {
            scrollLeft: 0,
            scrollTop: 0,
            scrollHeight: 0,
            scrollWidth: 0,
            clientHeight: 0,
            clientWidth: 0,
            diffOffset: 0
        };
        this.diffList = [0, 0, 0];
        this.getItemStyleCache = memoizeOne((_itemSize, _layout, _direction) => {
            // TODO: Cache of item styles, keyed by item index.
            return {};
        });
        this.init(this.props);
        this.itemList = new ListSet(props, refresh);
    }
    init(props) {
        this.props = props;
    }
    update(props) {
        this.props = props;
        this.itemList.update(props);
    }
    get id() {
        return `virtual-list-${INSTANCE_ID++}`;
    }
    get isHorizontal() {
        return isHorizontalFunc(this.props);
    }
    get isRtl() {
        return isRtlFunc(this.props);
    }
    get isRelative() {
        return this.props.position === 'relative';
    }
    get placeholderCount() {
        return this.props.placeholderCount >= 0 ? this.props.placeholderCount : this.props.overscanCount;
    }
    get outerTagName() {
        return this.props.outerElementType || this.props.outerTagName || 'div';
    }
    get innerTagName() {
        return this.props.innerElementType || this.props.innerTagName || 'div';
    }
    get itemTagName() {
        return this.props.itemElementType || this.props.itemTagName || 'div';
    }
    get field() {
        return this.wrapperField;
    }
    set field(o) {
        Object.assign(this.wrapperField, o);
        // Object.keys(o).forEach(key => {
        //   if (typeof o[key] === 'number' && typeof this.wrapperField[key] === 'number') {
        //     this.wrapperField[key] = o[key]
        //   }
        // })
    }
    isShaking(diff) {
        const list = this.diffList.slice(-3);
        this.diffList.push(diff);
        return list.findIndex(e => Math.abs(e) === Math.abs(diff)) !== -1 || isCosDistributing(this.diffList.slice(-4));
    }
    getItemStyle(index) {
        const { direction, itemSize, layout, shouldResetStyleCacheOnItemSizeChange } = this.props;
        const itemStyleCache = this.getItemStyleCache(shouldResetStyleCacheOnItemSizeChange ? itemSize : false, shouldResetStyleCacheOnItemSizeChange ? layout : false, shouldResetStyleCacheOnItemSizeChange ? direction : false);
        let style;
        const offset = convertNumber2PX(this.itemList.getOffsetSize(index));
        const size = convertNumber2PX(this.itemList.getSize(index));
        const isHorizontal = this.isHorizontal;
        const isRtl = this.isRtl;
        if (itemStyleCache.hasOwnProperty(index)) {
            // Note: style is frozen.
            style = Object.assign({}, itemStyleCache[index]);
            if (isHorizontal) {
                style.width = size;
                if (!this.isRelative) {
                    if (isRtl) {
                        style.right = offset;
                    }
                    else {
                        style.left = offset;
                    }
                }
            }
            else {
                style.height = size;
                if (!this.isRelative) {
                    style.top = offset;
                }
            }
        }
        else {
            if (this.isRelative) {
                itemStyleCache[index] = style = {
                    height: !isHorizontal ? size : '100%',
                    width: isHorizontal ? size : '100%'
                };
            }
            else {
                const offsetHorizontal = isHorizontal ? offset : 0;
                itemStyleCache[index] = style = {
                    position: 'absolute',
                    left: !isRtl ? offsetHorizontal : undefined,
                    right: isRtl ? offsetHorizontal : undefined,
                    top: !isHorizontal ? offset : 0,
                    height: !isHorizontal ? size : '100%',
                    width: isHorizontal ? size : '100%'
                };
            }
        }
        for (const k in style) {
            if (style.hasOwnProperty(k)) {
                style[k] = convertNumber2PX(style[k]);
            }
        }
        return style;
    }
}

export { Preset as default };
//# sourceMappingURL=preset.js.map
